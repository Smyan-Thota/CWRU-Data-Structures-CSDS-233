public class BinarySearchTree {

public class Node{
 
 private int data;
 private Node left;
 private Node right;
 
 public Node (int data) {
  this.setLeft(null);
  this.setRight(null);
  this.setData(data);
 }

 public int getData() {
  return data;
 }

 public void setData(int data) {
  this.data = data;
 }

 public Node getLeft() {
  return left;
 }

 public void setLeft(Node left) {
  this.left = left;
 }

 public Node getRight() {
  return right;
 }
 
 public void setRight(Node right) {
  this.right = right;
 }
 
}//end of node

public Node root;
int counter=0;

public BinarySearchTree() {
 this.root = null;
}

public Node insert(Node input,int key) {

 if(root == null) {
  return new Node(key);
 }
 
 if(key<root.getData()) {
  root.setLeft(insert(root.getLeft(), key));
 }
 
 else {
  root.setRight(insert(root.getRight(), key));
 }
 
 return root;
}

public void Inorder() {
 inorderhelper(root);
}

public void inorderhelper(Node root) {
if(root == null) {
 return;
}

inorderhelper(root.getLeft());
System.out.println(root.getData() + " ");
inorderhelper(root.getRight()); 
}

public Node kthSmallest(Node root, int k) {
 counter=0;
 Node helper = kthSmallestHelper(root,k);
 return helper;
}

public Node kthSmallestHelper(Node root, int k) {
 if(root==null)
  return null;
 
 Node left = kthSmallestHelper(root.getLeft(), k);
 
 if(left!=null)
  return left;
 counter++;
 if(counter==k)
  return root;
 
 return kthSmallestHelper(root.getRight(), k); 
}


public Node delete(Node root, int key) {
 
 //empty tree
 if(root == null)
  return root;
 //going down the tree
 if(key<root.getData())
  root.setLeft(delete(root.getLeft(), key));
 else if(key>root.getData())
  root.setRight(delete(root.getRight(), key));
 //key same as roots
 else {
  //only one child
  if(root.getLeft()==null)
   return root.getRight();
  else if(root.getRight()==null)
   return root.getLeft();
  
  //two children
  root.setData(min(root.getRight()));
  root.setRight(delete(root.getRight(), root.getData()));
 }
 return root;
}

public int min(Node root) {
 int min = root.getData();
 while(root.getLeft()!=null)
 {
  min = root.getLeft().getData();
  root=root.getLeft(); 
 }
 return min;
}

public int sum(Node root) {
if(root == null)
 return 0;
return (root.getData()+sum(root.getLeft())+sum(root.getRight()));
}

public Node search(Node root, int key) {
 
 if(root==null||root.getData()==key)
  return root;
 if(root.getData()<key)
  return search(root.getRight(),key);
 
 return search(root.getLeft(),key);
}






}