public class SinglyLinkedList {    
  //Represent a node of the singly linked list    
  public class Node{    
    int data;    
    Node next;    
    
    public Node(int data) {    
      this.data = data;    
      this.next = null;    
    }    
  }    
  
  //stores the head and tail of the LL 
  public Node head = null;    
  public Node tail = null;    
  
  //adds node to the list  
  public void addNode(int data) {    
    //make node   
    Node n = new Node(data);    
    
    //Checks if the list is empty    
    if(head == null) {    
      //If list is empty, both head and tail will point to new node    
      head = n;    
      tail = n;    
    }    
    else {    
      //newNode will be added after tail such that tail's next will point to newNode    
      tail.next = n;    
      //newNode will become new tail of the list    
      tail = n;    
    }    
  }    
  
  Node reverse(Node node)
  {
    Node prev = null;
    Node current = node;
    Node next = null;
    while (current != null) {
      next = current.next;
      current.next = prev;
      prev = current;
      current = next;
    }
    node = prev;
    return node;
  }
  
  //display() will display all the nodes present in the list    
  public void display() {    
    //Node current will point to head    
    Node current = head;    
    
    if(head == null) {    
      System.out.println("List is empty");    
      return;    
    }    
    System.out.println("Nodes of singly linked list: ");    
    while(current != null) {    
      //Prints each node by incrementing pointer    
      System.out.print(current.data + " ");    
      current = current.next;    
    }    
    System.out.println();    
  }
  
}